generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model whatsapp_connector_server {
  id        Int         @id @default(autoincrement())
  type      String
  url       String      @unique(map: "unique server url")
  companies companies[]
}

model companies {
  id                             Int                        @id(map: "poc_clinics_companies_pkey") @default(autoincrement())
  created_at                     DateTime                   @default(now()) @db.Timestamptz(6)
  name                           String                     @db.VarChar
  openai_assistant_id            String                     @db.VarChar
  cal_event_type_id              BigInt?                    @default(0)
  cal_event_slug                 String?                    @db.VarChar
  cal_api_key                    String?                    @db.VarChar
  cal_booking_length             BigInt?
  phone                          BigInt                     @unique(map: "unique phone")
  clinic_notification_phone      BigInt?
  updated_at                     DateTime?                  @db.Timestamptz(6)
  is_bot_activated               Boolean?                   @default(true)
  url_id                         String                     @default(dbgenerated("\"substring\"(md5((random())::text), 1, 6)")) @db.VarChar(6)
  whatsapp_connector_server_id   Int?
  crm_provider                   String?                    @db.VarChar
  wapi_connection_status         Boolean?
  timezone                       String?                    @default("America/Sao_Paulo")
  is_booking_reminders_activated Boolean?                   @default(true)
  is_replies_activated           Boolean?                   @default(true)
  booking_reminder_today         String?
  booking_reminder_tomorrow      String?
  deactivate_on_human_reply      Boolean?                   @default(false)
  deactivation_schedule          Json?                      @db.Json
  llm_stack                      String?                    @default("asst_vMtUz7ei87so7jRdh5jgmbXy")
  is_smart_followups_activated   Boolean?                   @default(false)
  bot_reply_to                   BotReplyType               @default(all)
  whatsapp_connector_server      whatsapp_connector_server? @relation(fields: [whatsapp_connector_server_id], references: [id], map: "poc_clinics_companies_whatsapp_connector_server_id_fkey")
  contacts                       contacts[]
  follow_up_configs              follow_up_config[]
  assistant_id                   Int?
  smart_follow_up_configs        smart_follow_up_config[]
  assistant                      assistant_instructions?    @relation(fields: [assistant_id], references: [id])
}

model assistant_instructions {
  id        Int         @id(map: "poc_assistant_instructions_pkey") @default(autoincrement())
  prompt    String
  companies companies[]
}

model contacts {
  id                           Int                @id(map: "poc_clinics_contacts_pkey") @default(autoincrement())
  created_at                   DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at                   DateTime?          @default(now()) @db.Timestamptz(6)
  name                         String?            @db.VarChar
  phone                        BigInt?
  pain_points                  String[]           @db.VarChar
  recommended_treatments       String[]           @db.VarChar
  treatments_of_interest       String[]           @db.VarChar
  is_recommendation_good       Boolean?
  is_willing_to_schedule       Boolean?
  no_scheduling_reason         String?            @db.VarChar
  schedule_event               Json?              @db.Json
  thread_id                    String?            @db.VarChar
  last_message_received        DateTime?          @default(now()) @db.Timestamptz(6)
  nr_immediate_followups_sent  Int                @default(0)
  last_immediate_followup_sent DateTime?          @db.Timestamptz(6)
  nr_smart_followups_sent      Int                @default(0)
  last_smart_followup_sent     DateTime?          @db.Timestamptz(6)
  total_messages               Int                @default(0)
  needs_review                 Boolean            @default(false)
  custom_data                  Json?
  company_id                   Int?               @default(1)
  archived_on                  DateTime?          @db.Timestamptz(6)
  photo_url                    String?            @db.VarChar
  is_bot_activated             Boolean?           @default(true)
  crm_appointment_at           DateTime?          @db.Timestamptz(6)
  crm_appointment_id           String?            @db.VarChar
  lead_status_id               Int?
  whatsapp_profile_name        String?
  next_smart_follow_up         DateTime?          @db.Timestamptz(6)
  smart_follow_up_stop_date    DateTime?          @db.Timestamptz(6)
  objection                    String?            @db.VarChar
  is_replies_activated         Boolean?           @default(true)
  last_activity                DateTime?          @db.Timestamptz(6)
  lead_status                  lead_statuses?     @relation(fields: [lead_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  companies                    companies?         @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "poc_clinics_contacts_company_id_fk")
  messages                     messages[]
  smart_follow_ups             smart_follow_ups[]
   @@unique([company_id, phone], map: "unique_company_phone")
}

model messages {
  id                    Int       @id @default(autoincrement())
  contact_id            Int
  sender_phone          BigInt?
  message               String
  image_url             String?
  sent_at               DateTime? @default(now()) @db.Timestamp(6)
  is_read               Boolean?  @default(false)
  message_type          String?   @default("text") @db.VarChar(50)
  author_type           String    @default("bot") @db.VarChar(50)
  processed             Boolean   @default(false)
  original_message_type String?   @default("text") @db.VarChar(50)
  source                String?
  author_auth_id        String?
  contacts              contacts  @relation(fields: [contact_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model audit_table {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  src_table  String
  col_name   String
  old_value  String?
  new_value  String?
  record_id  Int?
  user       String   @default(dbgenerated("CURRENT_USER"))
  action     String
  changed_at DateTime @default(now()) @db.Timestamptz(6)

  @@index([changed_at], map: "idx_audit_table_changed_at")
  @@index([col_name], map: "idx_audit_table_col_name")
  @@index([src_table], map: "idx_audit_table_src_table")
}

model follow_up_config {
  id         Int       @id @default(autoincrement())
  company_id Int
  delay      Int
  prompt     String
  is_active  Boolean   @default(true)
  company    companies @relation(fields: [company_id], references: [id])
}

model smart_follow_ups {
  id           Int      @id @default(autoincrement())
  scheduled_at DateTime
  message      String
  reasoning    String
  contact_id   Int
  is_sent      Boolean  @default(false)
  contact      contacts @relation(fields: [contact_id], references: [id])
}

model lead_statuses {
  id          Int        @id @default(autoincrement())
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  name        String?
  description String?
  contacts    contacts[]
}

enum BotReplyType {
  all
  paid_traffic_only
  non_paid_traffic_only
}

model smart_follow_up_config {
  id                      Int       @id @default(autoincrement())
  company_id              Int
  prompt                  String
  is_active               Boolean   @default(true)
  follow_up_count         Int       @default(1)
  follow_up_duration_days Int       @default(1)
  target_lead_status_ids  Int[] @default([])
  company                 companies @relation(fields: [company_id], references: [id])
}
  